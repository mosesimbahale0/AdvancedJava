package com.kca.BookStore.entity;

import jakarta.persistence.Entity;  // Annotation to mark the class as a JPA entity
import jakarta.persistence.GeneratedValue;  // Annotation for auto-generating primary key values
import jakarta.persistence.GenerationType;  // Specifies the generation strategy for the primary key
import jakarta.persistence.Id;  // Marks the field as the primary key
import jakarta.persistence.Table;  // Specifies the table name in the database

@Entity  // Specifies that this class is an entity mapped to a database table
@Table(name = "books")  // Specifies the name of the table this entity will map to
public class Book {

    @Id  // Marks the id field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Auto-generates the primary key value (ID) using the database's identity column
    private Long id;

    // Regular fields corresponding to the columns in the 'books' table
    private String title;  // Field to store the book title
    private String author;  // Field to store the author of the book
    private String description;  // Field to store the description of the book
    private String createdAt;  // Field to store the creation date (changed type to String)
    private String img;  // Field to store the image URL or path
    private Double rating;  // Field to store the rating of the book
    private Double price;  // Field to store the price of the book
    private Integer stock;  // Field to store the stock quantity

    // Getters and Setters
    // These methods allow other classes to access and modify the fields

    public Long getId() {
        return id;  // Returns the value of the 'id' field
    }

    public void setId(Long id) {
        this.id = id;  // Sets the value of the 'id' field
    }

    public String getTitle() {
        return title;  // Returns the value of the 'title' field
    }

    public void setTitle(String title) {
        this.title = title;  // Sets the value of the 'title' field
    }

    public String getAuthor() {
        return author;  // Returns the value of the 'author' field
    }

    public void setAuthor(String author) {
        this.author = author;  // Sets the value of the 'author' field
    }

    public String getDescription() {
        return description;  // Returns the value of the 'description' field
    }

    public void setDescription(String description) {
        this.description = description;  // Sets the value of the 'description' field
    }

    public String getCreatedAt() {
        return createdAt;  // Returns the value of the 'createdAt' field
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;  // Sets the value of the 'createdAt' field
    }

    public String getImg() {
        return img;  // Returns the value of the 'img' field
    }

    public void setImg(String img) {
        this.img = img;  // Sets the value of the 'img' field
    }

    public Double getRating() {
        return rating;  // Returns the value of the 'rating' field
    }

    public void setRating(Double rating) {
        this.rating = rating;  // Sets the value of the 'rating' field
    }

    public Double getPrice() {
        return price;  // Returns the value of the 'price' field
    }

    public void setPrice(Double price) {
        this.price = price;  // Sets the value of the 'price' field
    }

    public Integer getStock() {
        return stock;  // Returns the value of the 'stock' field
    }

    public void setStock(Integer stock) {
        this.stock = stock;  // Sets the value of the 'stock' field
    }
}

//@Entity: Indicates that this class is a JPA entity (mapped to a database table).
//@Table(name = "books"): Specifies that this entity maps to the books table in the database.
//@Id: Marks the id field as the primary key.
//@GeneratedValue(strategy = GenerationType.IDENTITY): Specifies that the ID will be automatically generated by the database.
//        Fields: Each field (e.g., title, author, description) represents a column in the database table.
//Getters and Setters: These methods are used to access and modify the private fields of the class. They are part of the JavaBeans convention, commonly used in Java classes.
