/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package kca.desktop.app;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 *
 * @author personal
 */
import javax.swing.*;
import java.util.ArrayList;
import java.util.List;

public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();

        // Make the JFrame full screen
        setExtendedState(JFrame.MAXIMIZED_BOTH);   // Maximize to full screen
//        setUndecorated(true);                      // Optional: remove title bar, borders, etc.

        // Fetch books from API and display them in the table
        fetchAndDisplayBooks();

        // Add mouse listener for delete action
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                int row = jTable1.rowAtPoint(evt.getPoint());
                int col = jTable1.columnAtPoint(evt.getPoint());

                // Ensure a valid row is clicked
                if (row != -1 && col == 8) {  // Assuming "Actions" column is the 10th column
                    int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this book?", "Delete Book", JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        Integer bookId = (Integer) jTable1.getValueAt(row, 0);  // Assuming ID is in the first column
                        Long longBookId = bookId.longValue();  // Convert Integer to Long
                        boolean isDeleted = BookDeleter.deleteBook(longBookId);  // Call the BookDeleter class to delete the book

                        if (isDeleted) {
                            ((BookTableModel) jTable1.getModel()).removeBook(row); // Remove from table model
                            jTable1.revalidate();  // Ensure the table is updated after the deletion
                            jTable1.repaint();     // Repaint to reflect changes
                        } else {
                            JOptionPane.showMessageDialog(jTable1, "Failed to delete the book from the server.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        });

// Add mouse listener for edit action
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                int row = jTable1.rowAtPoint(evt.getPoint());
                int col = jTable1.columnAtPoint(evt.getPoint());

                if (row != -1 && col == 10) { // Assuming column 11 is for edit
                    Integer bookId = (Integer) jTable1.getValueAt(row, 0); // Get book ID
                    EditBookForm editForm = new EditBookForm(bookId);
                    editForm.setVisible(true);
                    editForm.setLocationRelativeTo(null); // Center the form on the screen
                }
            }
        });

    }

    /**
     * Fetches books from the API and sets the data to the table model.
     */
    private void fetchAndDisplayBooks() {
        List<Book> books = BookFetcher.fetchBooks(); // Fetch books from the API
        if (books != null) {
            // Use the custom BookTableModel
            bookTableModel = new BookTableModel(books);
            jTable1.setModel(bookTableModel); // Set the custom table model

            if (jTable1.getColumnModel().getColumnCount() > 8) {
                jTable1.getColumnModel().getColumn(8).setCellRenderer(new ButtonRenderer());
                jTable1.getColumnModel().getColumn(8).setCellEditor(new ButtonEditor(jTable1, books, bookTableModel));
            }

            if (jTable1.getColumnModel().getColumnCount() > 9) {
                jTable1.getColumnModel().getColumn(9).setCellRenderer(new EditButtonRenderer());
                jTable1.getColumnModel().getColumn(9).setCellEditor(new EditButtonEditor(jTable1, books, bookTableModel, true));
            }

            // Refresh the table view
            jTable1.revalidate();
            jTable1.repaint();

            // Update the label to show the number of books
            jLabel3.setText(books.size() + " Books");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to fetch books from the server.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        jLabel1.setText("TechBook Dashbard");

        jLabel2.setText("Wlcome Admin!");

        jButton1.setText("Add Book");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("0 Books");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Author", "Description", "Image", "Rating", "Stock", "Price", "Actions", "Edit"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1042, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(35, 35, 35)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // JOptionPane.showMessageDialog(this, "Add book feature coming soon!");
        // Open the BookForm when the button is clicked
        BookForm bookForm = new BookForm();  // Create an instance of BookForm
        bookForm.setVisible(true);           // Make the form visible
        bookForm.setLocationRelativeTo(null); // Optional: Center the form on the screen

        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
     private BookTableModel bookTableModel;
}
